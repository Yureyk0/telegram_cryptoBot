const TelegramApi = require('node-telegram-bot-api')

const request = require('request')

const token = '1814664856:AAHSRegO0gOAcVY7CrOeDLUi4cGE1rKLpL4'

const bot = new TelegramApi(token, {polling: true})

const db = require('./db/db')

const Users = db.users
const Wallets = db.wallets
const Tokens = db.tokens
const Times = db.times
const Targetmesses = db.targetmesses

const KB = {
    news: '–ù–æ–≤–∏–Ω–∏',
    currency: '–ö—É—Ä—Å',
    portfolio: '–ü–æ—Ä—Ç—Ñ–µ–ª—å',
    signal: '–¢–µ—Ö. –∞–Ω–∞–ª—ñ–∑',
    topList: '–ü–æ–ø—É–ª—è—Ä–Ω–µ',
    seachToken: '–ü–æ—à—É–∫',
    back: '–ù–∞–∑–∞–¥',
    createProtfolio: '–°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—å',
    editPortfolio: '–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –ø–æ—Ä—Ç—Ñ–µ–ª—è',
    deletePortfolio: '–í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—å'
}

const endUrlLink = {
    topListUrl: '/top/totalvolfull?limit=10&tsym=USD',
    searchToken: '/pricemultifull?fsyms=',
    news: '/v2/news/?lang=EN',
    signal: '/tradingsignals/intotheblock/latest?fsym='
}

const topCrypto = ['BTC','ETH','DOGE','LTC','ADA']

const option = {
    "parse_mode": "HTML"
}

bot.onText(/\/admin/, async (msg) =>{
    if (msg.chat.id == 414228816){
        bot.sendMessage(msg.chat.id,'–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º .')
        let text = await onText()
        bot.sendMessage(msg.chat.id,'–í–≤–µ–¥—ñ—Ç—å —á–∞—Å –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤—Å—ñ–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º .')
        let time = await onText()
        Targetmesses.create({
            mess: text,
            time: time
        }).then(result => {
            console.log(result)
        }).catch(err =>{
            console.log(err)
        })

    }else {
        bot.sendMessage(msg.chat.id,'–í–∏ –Ω–µ –∞–¥–º—ñ–Ω')
    }
})

bot.onText(/\/start/, async (msg) =>{
    let data = await Users.findOne({where:{ user_id: msg.chat.id}})
    // let data1 = await Users.findAll({where:{ user_name: 'Yurets228'}})
    console.log(msg.from.username)
    if(data == null){
        if ( msg.from.username == undefined ){
            Users.create({
                user_id: msg.from.id,
                user_name: msg.from.first_name
            }).then(result => {
                console.log(result)
            }).catch(err =>{
                console.log(err)
            })
        }else {
            Users.create({
                user_id: msg.from.id,
                user_name: msg.from.username
            }).then(result => {
                console.log(result)
            }).catch(err =>{
                console.log(err)
            })

        }
    }

    bot.sendMessage(msg.chat.id, '–†–∞–¥—ñ –≤–∞—Å –±–∞—á–∏—Ç–∏ .', {
        reply_markup:{
            keyboard:[
                [KB.news, KB.currency],
                [KB.portfolio, KB.signal]
            ]
        }
    })
})

bot.on('message',msg=>{
    // console.log(msg)
    switch (msg.text){
        case KB.news:
            blockNews(msg.chat.id, true)
            break
        case KB.currency:
            blockCurrency(msg.chat.id)
            break
        case KB.signal:
            blockSignal(msg.chat.id)
            break
        case KB.topList:
            sendTopListCurrency(msg.chat.id)
            break
        case KB.seachToken:
            searchTokenPrice(msg.chat.id)
            break
        case KB.back:
            start(msg.chat.id)
            break
        case KB.portfolio:
            blockPortfolio(msg)
            break
        case KB.createProtfolio:
            createProtfolio(msg)
            break
        case KB.editPortfolio:
            editPortfolio(msg.chat.id)
            break

    }
    console.log(msg.chat.username)



}) // –°–≤–∏—Ç—á –¥–ª—è –≥–ª–∞–≤–Ω—ã—Ö —Ñ-–π

function start(chatId){
    bot.sendMessage(chatId, "–í–∏ –≤ –≥–æ–ª–æ–≤–Ω–æ–º—É –º–µ–Ω—é )", {
        reply_markup:{
            keyboard:[
                [KB.news, KB.currency],
                [KB.portfolio, KB.signal]
            ]
        }
    })

}

function blockCurrency(chatId){
    bot.sendMessage(chatId, `–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –≤–∞–º –∫–Ω–æ–ø–∫—É) :`,{
        reply_markup:{
            keyboard:[
                [KB.topList, KB.seachToken],
                [KB.back]
            ]
        }
    })
    bot.on('message',msg=>{
        if(msg.text === KB.back){
            // start(msg.chat.id)
        }
    })

}// –º–µ–Ω—é –∫—É—Ä—Å–∞

async function sendTopListCurrency(chatId){

    const list = await anyParseAPI(endUrlLink.topListUrl);
    // console.log(list)
    let tmp=''
    let tmpRovno
    let tmpProcent

    for(let i = 0; i < list.Data.length; i++){
        tmpProcent = ((list.Data[i].RAW.USD.PRICE - list.Data[i].RAW.USD.OPEN24HOUR)/(list.Data[i].RAW.USD.OPEN24HOUR/100)).toFixed(2)

        tmpRovno = `${list.Data[i].CoinInfo.FullName.italics()} (${list.Data[i].CoinInfo.Name.bold()})`
        if(tmpRovno.length >=15){
            tmpRovno = `${list.Data[i].CoinInfo.Name.italics()} (${list.Data[i].CoinInfo.Name.bold()})`
        }
        if(tmpRovno.length >5){
            for (tmpRovno.length; tmpRovno.length<=27;tmpRovno.length++){
                tmpRovno = tmpRovno + `~`;
            }
        }
        if (tmpProcent <=0){
            tmp= tmp + `\nüî¥${tmpRovno} ${list.Data[i].RAW.USD.PRICE.toFixed(1).bold()}$ (‚¨á${tmpProcent}%)\n`
        }else {
            tmp= tmp + `\nüü¢${tmpRovno} ${list.Data[i].RAW.USD.PRICE.toFixed(1).bold()}$ (‚¨Ü${tmpProcent}%)\n`
        }
        // tmp= tmp + `\n${tmpRovno} ${list.Data[i].RAW.USD.PRICE} (${tmpProcent}%) üî¥üü¢‚¨ÜÔ∏è‚¨áÔ∏è`
    }

    console.log(tmpRovno.length)
    bot.sendMessage(chatId, `üìà–¶—ñ–Ω–∞ –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö –∫—É—Ä—Å—ñ–≤ —Ç–æ–∫–µ–Ω—ñ–≤ :  \n${tmp}\n –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –ø–æ—à—É–∫ —è–∫—â–æ —Ç—É—Ç –Ω–µ–º–∞—î –ø–æ—Ç—Ä—ñ–±–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ .... `,option)

}// –≤—ã–≤–æ–¥ –∏ –∞–¥–∞–ø –∫—É—Ä—Å–æ–≤

async function searchTokenPrice(chatId){

    const endNameToken = '&tsyms=USD'
    let fullLink
    let resultSearch
    bot.sendMessage(chatId, `–í–≤–µ–¥—ñ—Ç—å –∞–±—Ä–µ–≤—ñ–∞—Ç—É—Ä—É —à—É–∫–∞—î–º–æ—ó –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏(–ù–∞–ø—Ä–∏–∫–ª–∞–¥: btc):`,{
        reply_markup:{
            keyboard:[
                [KB.back]
            ]
        }
    })
    const text = await onText() //btc
    fullLink = endUrlLink.searchToken+text+endNameToken
    const list = await anyParseAPI(fullLink)
    if(Object.keys(list).length == 2){
        if(list.RAW[text.toUpperCase()].USD.CHANGEPCT24HOUR >=0){
            resultSearch = `üü¢(${list.RAW[text.toUpperCase()].USD.FROMSYMBOL.bold()})---${list.RAW[text.toUpperCase()].USD.PRICE.toFixed(1).bold()}$‚¨Ü\n1h  ${list.RAW[text.toUpperCase()].USD.CHANGEPCTHOUR.toFixed(2)}%    24H  ${list.RAW[text.toUpperCase()].USD.CHANGEPCT24HOUR.toFixed(2)}%`
        }else {
            resultSearch = `üî¥(${list.RAW[text.toUpperCase()].USD.FROMSYMBOL.bold()})---${list.RAW[text.toUpperCase()].USD.PRICE.toFixed(1).bold()}$‚¨á\n1h  ${list.RAW[text.toUpperCase()].USD.CHANGEPCTHOUR.toFixed(2)}%    24H  ${list.RAW[text.toUpperCase()].USD.CHANGEPCT24HOUR.toFixed(2)}%`
        }

        bot.sendMessage(chatId, resultSearch, option)
        blockCurrency(chatId)
    }else{
        bot.sendMessage(chatId, `–£–ø—Å, –Ω–∞ –∂–∞–ª—å –º–∏ –Ω–µ –∑–º–æ–≥–ª–∏ –∑–Ω–∞–π—Ç–∏ —Ç–∞–∫—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ . \n –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ !)`)
        searchTokenPrice(chatId)

    }
}// –ø–æ–∏—Å–∫ —Ç–æ–∫–µ–Ω–∞

async function anyParseAPI(endUrl){

    return new Promise(function(resolve, reject){
        request(`https://min-api.cryptocompare.com/data${endUrl}`, (error, response, body) =>{

            if(body == undefined){
                console.log(1)
            }else {
                const data = JSON.parse(body)
                resolve(data)
            }
        })
    })

}// —É–Ω–µ–≤–µ—Ä—Å –ø–∞—Ä—Å –¥–ª—è –∞–ø–∏

async function onText(){
    return new Promise(function (resolve, reject){
        bot.on('message', msg=>{
            resolve(msg.text)
        })
    })
} // —Å–ª—É—à–∞—Ç–µ–ª—å –≤ –≤–∏–¥–µ —Ñ-–∏

async function blockPortfolio(chatObj){
    let data = await Wallets.findAll({where:{user_id: chatObj.from.id}})
    if (Object.keys(data).length == 1){
        bot.sendMessage(chatObj.chat.id, "–£ –≤–∞—Å –≤–∂–µ —î –æ–¥–∏–Ω –ø–æ—Ä—Ç–µ—Ñ–µ–ª—å —Ç–æ–º—É –ø—Ä–æ–ø–æ–Ω—É—î–º–æ —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è –Ω–∏–º , –∞–±–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ —â–µ –æ–¥–∏–Ω .", {

            reply_markup:{
                keyboard:[
                    [`${data[0].dataValues.name_wallet}`,KB.createProtfolio],
                    [KB.editPortfolio],
                    [KB.back]
                ]
            }
        })
    }else if (Object.keys(data).length == 2){
        bot.sendMessage(chatObj.chat.id, "–£ –≤–∞—Å –≤–∂–µ —î –¥–≤–∞ –ø–æ—Ä—Ç–µ—Ñ–µ–ª—è , —Ç–æ–º—É –ø—Ä–æ–ø–æ–Ω—É—î–º–æ —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—è –Ω–∏–º–∏ .", {

            reply_markup:{
                keyboard:[
                    [`${data[0].dataValues.name_wallet}`,`${data[1].dataValues.name_wallet}`],
                    [KB.editPortfolio],
                    [KB.back]
                ]
            }
        })
    }else{
        bot.sendMessage(chatObj.chat.id, "–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î –≤–ª–∞—Å–Ω–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è –Ω–∞ –Ω–∞—à–æ–º—É —Å–µ—Ä–≤—ñ—Å—ñ , —Ç–æ–º—É —Ä–µ–∫–æ–º–µ–Ω–¥—É—î–º–æ –π–æ–≥–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∑–∞—Ä–∞–∑ !!!", {
            reply_markup:{
                keyboard:[
                    [KB.createProtfolio],
                    [KB.back]
                ]
            }
        })
    }
    let text = await onText()


    if(data[0] == undefined){

    }else if (text == data[0].dataValues.name_wallet){
        editInsideWallet(chatObj.chat.id, data[0].dataValues.id_wallet,text)
    }else if(data[1] != undefined && data[1].dataValues.name_wallet == text){
        editInsideWallet(chatObj.chat.id, data[1].dataValues.id_wallet,text)
    }else if(KB.editPortfolio == text){

    }else if(text == KB.back){

    }else if (KB.createProtfolio == text){

    }else {
        start(chatObj.chat.id)
    }
}// –∞–¥–∞–ø –º–µ–Ω—é –ø–æ—Ä—Ç—Ñ

async function createProtfolio(chatObj){
    bot.sendMessage(chatObj.chat.id, `–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Å–≤–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é ( –ù–∞–ø—Ä–∏–∫–ª–∞–¥ : "–ü–æ—Ä—Ç—Ñ–µ–ª—å ‚Ññ1" ). \n –ù–∞–∑–≤–∞ –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –Ω–µ –±—ñ–ª—å—à–µ 15 —Å–∏–º–≤–æ–ª—ñ–≤ . `,{
        reply_markup:{
            keyboard:[
                [KB.back]
            ]
        }
    })
    let text = await onText()
    console.log(text)
    if (text.length >15){
       await createProtfolio(chatObj)
    }else if(text == KB.back){

    }else{
        Wallets.create({
            user_id: chatObj.from.id,
            name_wallet: text,
            balance: 0
        }).then(result => {
            console.log(result)
        }).catch(err =>{
            console.log(err)
        })
        bot.sendMessage(chatObj.chat.id, `–í—ñ—Ç–∞—î–º–æ –≤–∞—Å , –≤–∏ —Å—Ç–≤–æ—Ä–∏–ª–∏ –≤–ª–∞—Å–Ω–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å , —Å–∫–æ—Ä—ñ—à –∑–∞–ø–æ–≤–Ω—ñ—Ç—å –π–æ–≥–æ !!! `)
        start(chatObj.chat.id)

    }

}

async function editPortfolio(chatid){
    bot.sendMessage(chatid, "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è .", {
        reply_markup:{
            keyboard:[
                [KB.deletePortfolio],
                [KB.back]
            ]
        }
    })
    let text = await onText()
    if (text == KB.back){

    }else if (text == KB.deletePortfolio){
        let data = await Wallets.findAll({where:{user_id: chatid}})
        let tmpKeybord = []
        for (let i = 0; i<Object.keys(data).length; i++){
            tmpKeybord.push(data[i].dataValues.name_wallet)
        }

        bot.sendMessage(chatid, "–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å , —è–∫–º–π –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏  .", {
            reply_markup:{
                keyboard:[
                    tmpKeybord,
                    [KB.back]
                ]
            }
        })

        text = await onText()

        if (text == KB.back){

        }else if (text == tmpKeybord[0] || text == tmpKeybord[1]){
            data = await Wallets.findOne({where:{name_wallet: text}})
            deletePortfolio(chatid,data.dataValues.id_wallet)
        }else {
            bot.sendMessage(chatid, "–ü–æ—Ä—É—à–µ–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞ –≤–≤–æ–¥—É.")
            editPortfolio(chatid)
        }
    }

}

async function deletePortfolio(chatid,idWallets){

    await Tokens.destroy({ where : {id_wallet: idWallets}})
    await Times.destroy({where: {id_wallet : idWallets}})
    await Wallets.destroy({ where : {id_wallet : idWallets}})

    bot.sendMessage(chatid, "–í–∏ –≤–∏–¥–∞–ª–∏–ª–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—å .")
    start(chatid)
}

async function editInsideWallet(chatId,idWallets,nameWallet,complite){
    bot.sendMessage(chatId, `–í–∏ –ø–µ—Ä–µ–≥–ª—è–¥–∞—î—Ç–µ –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—ñ–¥ –Ω–∞–∑–≤–æ—é "${nameWallet}"`, {
        reply_markup:{
            keyboard:[
                [`–î–æ–¥–∞—Ç–∏ –∞–∫—Ç–∏–≤`,'–í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫—Ç–∏–≤'],
                [`–û–Ω–æ–≤–∏—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—å`],
                [`–î–æ–¥–∞—Ç–∏/–í–∏–¥–∞–ª–∏—Ç–∏ —á–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è`],
                [KB.back]
            ]
        }
    })

    let data = await Tokens.findAll({where:{id_wallet: idWallets}})
    let tf = false
    if ((complite != true && Object.keys(data).length == 0) || (complite != true && data == null)){
        bot.sendMessage(chatId, `–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î —Å—Ç–≤–æ—Ä–µ–Ωu—Ö –∞–∫—Ç–∏–≤—ñ–≤ , —â–æ–± –¥–æ–¥–∞—Ç–∏ –∞–∫—Ç–∏–≤–∏ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–¥–∞—Ç–∏ –∞–∫—Ç–∏–≤–∏".`, {
            reply_markup:{
                keyboard:[
                    [`–î–æ–¥–∞—Ç–∏ –∞–∫—Ç–∏–≤`],
                    [KB.back]
                ]
            }
        })
    }else if (Object.keys(data).length >=1) {

        await outputActive(chatId,idWallets,nameWallet)


    }

    let text = await onText()
    if (text == '–î–æ–¥–∞—Ç–∏ –∞–∫—Ç–∏–≤'){
        addToken(chatId,idWallets,nameWallet,data)
    }else if (text == KB.back){

    }else if(text == '–í–∏–¥–∞–ª–∏—Ç–∏ –∞–∫—Ç–∏–≤'){
        let tmp =''
        let arrTmp = [0]
        data = await Tokens.findAll({where:{id_wallet: idWallets}})

        if (Object.keys(data).length == 0 || data == null){
            bot.sendMessage(chatId, `–£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î —Å—Ç–≤–æ—Ä–µ–Ωu—Ö –∞–∫—Ç–∏–≤—ñ–≤ .`)
            start(chatId)
        }else if(Object.keys(data).length >= 1 ){
            for (let i=0; Object.keys(data).length>i;i++){
                tmp = tmp + `${i+1})  ${data[i].dataValues.name_token} ;\n`
                arrTmp.push(data[i].dataValues.id)
            }
            console.log(arrTmp)
            bot.sendMessage(chatId, `–í–∞—à—ñ –∞–∫—Ç–∏–≤–∏ :\n\n ${tmp} \n\n–î–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤–∞—à–æ–≥–æ –∞–∫—Ç–∏–≤—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç–∏ —ñ–Ω–¥–µ–∫—Å –≤ —á–∞—Ç (–ù–∞–ø—Ä–∏–∫–ª–∞–¥ : "1")`)
            text = await onText()

            if (Number(text)>=1 && Number(text)<arrTmp.length){
                await Tokens.destroy({ where : {id: arrTmp[Number(text)]}})
                await bot.sendMessage(chatId, `–í–∞—à –∞–∫—Ç–∏–≤ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ .`)
                start(chatId)
            }else {
                await bot.sendMessage(chatId, `–ü–æ—Ä—É—à–µ–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞ –≤–≤–æ–¥—É !`)
                start(chatId)
            }

        }
    }else if(text == `–û–Ω–æ–≤–∏—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—å`){
        editInsideWallet(chatId,idWallets,nameWallet,complite)
    }else if(text == `–î–æ–¥–∞—Ç–∏/–í–∏–¥–∞–ª–∏—Ç–∏ —á–∞—Å —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è`){
        blockTimeMessage(chatId,idWallets,nameWallet)
    }else {
        start(chatId)
    }

}

async function addToken(chatId,idWallets,nameWallet,data){
    bot.sendMessage(chatId, `–í–≤–µ–¥—ñ—Ç—å –∞–±–±—Ä–µ–≤—ñ–∞—Ç—É—Ä—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏ , —â–æ–± –¥–æ–¥–∞—Ç–∏ —ó—ó –¥–æ –≤–∞—à–∏—Ö –∞–∫—Ç–∏–≤—ñ–≤ .`, {
        reply_markup:{
            keyboard:[
                [KB.back]
            ]
        }
    })

    let addToken = {
        id_wallet: idWallets,
        first_price	: 0,
        name_token: '',
        count_token: 0
    }

    let fullLink
    let text = await onText() //btc
    fullLink = endUrlLink.searchToken+text+'&tsyms=USD'
    const list = await anyParseAPI(fullLink)
    let complite = false

    if(Object.keys(list).length == 2){
        addToken.name_token = text.toUpperCase()
        console.log(addToken)

        bot.sendMessage(chatId, `–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —ñ —Ü—ñ–Ω—É –≤ –¥–æ–ª–∞—Ä–∞$ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∏ —É —Ç–∞–∫–æ–º—É –≤–∏–≥–ª—è–¥—ñ –ö–Ü–õ–¨–ö–Ü–°–¢–¨/–¶–Ü–ù–ê ( –ù–∞–ø—Ä–∏–∫–ª–∞–¥ : 0.0005/100 )`)
        let orig = 0
        for (let i = 0; i<Object.keys(data).length; i++){
            if (data[i].dataValues.name_token == text.toUpperCase()){
                orig++
            }
        }


        text = await onText()
        let arrCP = text.split('/')
        if (arrCP == null || arrCP.length <= 1 || text.indexOf('/')==-1 || arrCP.length >= 3 || Number(arrCP[0])==null || Number(arrCP[1])==null || orig >=1){
            bot.sendMessage(chatId, `–ü–æ—Ä—É—à–µ–Ω—ñ –Ω–æ—Ä–º–∏ –≤–≤–æ–¥—É —Ç–µ–∫—Å—Ç—É , –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–≤–µ—Å—Ç–∏ —É –≤–∏–≥–ª—è–¥—ñ –ö–Ü–õ–¨–ö–Ü–°–¢–¨/–¶–Ü–ù–ê ( –ù–∞–ø—Ä–∏–∫–ª–∞–¥ : 0.0005/100 ) , –∞–±–æ –∞–∫—Ç–∏–≤ –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —î –≤ –≤–∞—à–æ–º—É –ø–æ—Ç—Ñ–µ–ª—ñ .`)
            editInsideWallet(chatId,idWallets,nameWallet,complite,list)
        }else {
            addToken.count_token = arrCP[0]
            addToken.first_price = arrCP[1]
            Tokens.create(addToken).then(result => {
                console.log(result)
            }).catch(err =>{
                console.log(err)
            })
            complite = true
            bot.sendMessage(chatId, `–ê–∫—Ç–∏–≤ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ , —Ç–µ–ø–µ—Ä –º–æ–∂–µ—Ç–µ —Å–ª—ñ–¥–∫—É–≤–∞—Ç–∏ –∑–∞ –Ω–∏–º —É —Å–≤–æ—î–º—É –ø–æ—Ä—Ç—Ñ–µ–ª—ñ . \n –í–∞—à –∞–∫—Ç–∏–≤ –∑‚Äô—è–≤–∏—Ç—å—Å—è –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º (5-10 —Å–µ–∫)`)
            let list = await Tokens.findAll({where:{id_wallet: idWallets}})
            editInsideWallet(chatId,idWallets,nameWallet,complite,list)
        }

    }else{

    }
}

async function blockTimeMessage(chatId,idWallets,nameWallet){

    let data = await Times.findAll({where:{user_id: chatId}})
    let tf = false

    if (Object.keys(data).length == 0 || data == null){
        bot.sendMessage(chatId, `–í–∏ —â–µ –Ω–µ –æ–±–∏—Ä–∞–ª–∏ —á–∞—Å –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É –≤–∞—à–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è . –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "–î–æ–¥–∞—Ç–∏ —á–∞—Å" –¥–ª—è —Ç–æ–≥–æ , —â–æ–± –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –Ω–æ–≤–∏–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ .`, {
            reply_markup:{
                keyboard:[
                    [`–î–æ–¥–∞—Ç–∏ —á–∞—Å`],
                    [KB.back]
                ]
            }
        })
    }else {
        bot.sendMessage(chatId, `–í–∏ —â–µ –Ω–µ –æ–±–∏—Ä–∞–ª–∏ —á–∞—Å –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É –≤–∞—à–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è . –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "–î–æ–¥–∞—Ç–∏ —á–∞—Å" –¥–ª—è —Ç–æ–≥–æ , —â–æ–± –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –Ω–æ–≤–∏–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ .`, {
            reply_markup:{
                keyboard:[
                    [`–î–æ–¥–∞—Ç–∏ —á–∞—Å`,`–í–∏–¥–∞–ª–∏—Ç–∏ —á–∞—Å`],
                    [KB.back]
                ]
            }
        })
    }

    let text = await onText()

    for (let a = 0; a<Object.keys(data).length; a++){
        if (data[a].dataValues.date_infoPortfolio == text){
            tf = true
        }
    }

    if (tf == true){
        bot.sendMessage(chatId, `–ü–æ—Ä—É—à–µ–Ω—ñ –Ω–æ—Ä–º–∏ –≤–≤–æ–¥—É —Ç–µ–∫—Å—Ç—É , —Ç–∞–∫–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É –≤–∂–µ —ñ—Å–Ω—É—î .`)
        blockTimeMessage(chatId,idWallets,nameWallet)
    }
    if (text == '–î–æ–¥–∞—Ç–∏ —á–∞—Å'){

        bot.sendMessage(chatId, `–í–≤–µ–¥—ñ—Ç—å —á–∞—Å –≤ —è–∫–∏–π —Ö–æ—á–∏—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∫–æ–∂–µ–Ω –¥–µ–Ω—å –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å –≤–∞—à–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é . –ù–∞–ø—Ä–∏–∫–ª–∞–¥ : ( 9:25 –∞–±–æ 8:00)`)

        text = await onText()

        let arrCP = text.split(':')
        if (text == KB.back){

        }else if (arrCP == null || arrCP.length <= 1 || text.indexOf(':')==-1 || arrCP.length >= 3 || Number(arrCP[0])==null || Number(arrCP[1])==null || arrCP[0]>24 || arrCP[0] <0 || arrCP[1] >60 || arrCP[1]<0){
            bot.sendMessage(chatId, `–ü–æ—Ä—É—à–µ–Ω—ñ –Ω–æ—Ä–º–∏ –≤–≤–æ–¥—É —Ç–µ–∫—Å—Ç—É , –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–≤–µ—Å—Ç–∏ —É –≤–∏–≥–ª—è–¥—ñ –ì–û–î–ò–ù–ò/–•–í–ò–õ–ò–ù–ò (–ù–∞–ø—Ä–∏–∫–ª–∞–¥ :  9:25 –∞–±–æ 8:00).`)
            blockTimeMessage(chatId,idWallets,nameWallet)
        }else {
            bot.sendMessage(chatId, `–í—ñ—Ç–∞—î–º–æ , —á–∞—Å —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ .`)

            Times.create({
                user_id: chatId,
                id_wallet: idWallets,
                date_infoPortfolio: text
            }).then(result => {
                console.log(result)
            }).catch(err =>{
                console.log(err)
            })
        }


    }else if (text == '–í–∏–¥–∞–ª–∏—Ç–∏ —á–∞—Å'){

        let tmp =''
        let arrTmp = [0]
        data = await Times.findAll({where:{user_id : chatId,id_wallet : idWallets}})
        console.log(data)
        if (text == KB.back){

        }else if (Object.keys(data).length == 0 || data == null){
            bot.sendMessage(chatId, `–£ –≤–∞—Å —â–µ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞ —Ü—è —Ñ—É–∫—Ü—ñ—è  .`)
            blockTimeMessage(chatId,idWallets,nameWallet)
        }else if(Object.keys(data).length >= 1 ){
            for (let i=0; Object.keys(data).length>i;i++){
                tmp = tmp + `${i+1})  ${data[i].dataValues.date_infoPortfolio} ;\n`
                arrTmp.push(data[i].dataValues.id)
            }
            console.log(arrTmp)
            bot.sendMessage(chatId, `–í–∞—à—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É :\n${tmp}–î–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–µ–≤–Ω–æ–≥–æ —á–∞—Å—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç–∏ —ñ–Ω–¥–µ–∫—Å –≤ —á–∞—Ç (–ù–∞–ø—Ä–∏–∫–ª–∞–¥ : "1")`)
            text = await onText()

            if (text == KB.back){

            }else if (Number(text)>=1 && Number(text)<arrTmp.length){
                await Times.destroy({ where : {id: arrTmp[Number(text)]}})
                await bot.sendMessage(chatId, `–£—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ .`)
                editInsideWallet(chatId,idWallets,nameWallet)
            }else {
                await bot.sendMessage(chatId, `–ü–æ—Ä—É—à–µ–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞ –≤–≤–æ–¥—É !`)
                editInsideWallet(chatId,idWallets,nameWallet)
            }
        }

    }else if (text == KB.back){

    }

}

async function outputActive(chatId,idWallets,nameWallet){
    const endNameToken = '&tsyms=USD'
    let fullLink
    let resultSearch
    let tmp = ''
    let data = await Tokens.findAll({where:{id_wallet: idWallets}})

    for (let i=0; Object.keys(data).length>i;i++){
        tmp = tmp + `${data[i].dataValues.name_token},`
    }
    resultSearch = endUrlLink.searchToken + tmp.slice(0, -1) + endNameToken

    let listPort = await anyParseAPI(resultSearch)
    console.log(listPort)
    let textMess = ''
    let procent
    let totalBalance = 0
    for (let i=0; Object.keys(data).length>i;i++){
        procent = ((listPort.RAW[data[i].dataValues.name_token].USD.PRICE*data[i].dataValues.count_token - data[i].dataValues.first_price)/ (data[i].dataValues.first_price/100)).toFixed(2)
        totalBalance += Number((listPort.RAW[data[i].dataValues.name_token].USD.PRICE*data[i].dataValues.count_token))
        if (procent > 0){
            textMess = textMess + `${i+1}) üü¢ ${data[i].dataValues.name_token} (${data[i].dataValues.count_token})~~~~~~~ ${(listPort.RAW[data[i].dataValues.name_token].USD.PRICE*data[i].dataValues.count_token).toFixed(2)} $ \n\n ‚åõ1h  ${listPort.RAW[data[i].dataValues.name_token].USD.CHANGEPCTHOUR.toFixed(2).bold()}%  ‚åõ24H  ${listPort.RAW[data[i].dataValues.name_token].USD.CHANGEPCT24HOUR.toFixed(2).bold()}%  ‚åõALL ${procent.bold()}%\n\n`
        }else {
            textMess = textMess + `${i+1}) üî¥ ${data[i].dataValues.name_token} (${data[i].dataValues.count_token})~~~~~~~ ${(listPort.RAW[data[i].dataValues.name_token].USD.PRICE*data[i].dataValues.count_token).toFixed(2)} $ \n\n ‚åõ1h  ${listPort.RAW[data[i].dataValues.name_token].USD.CHANGEPCTHOUR.toFixed(2).bold()}%  ‚åõ24H  ${listPort.RAW[data[i].dataValues.name_token].USD.CHANGEPCT24HOUR.toFixed(2).bold()}%  ‚åõALL ${procent.bold()}%\n\n`
        }

    }

    bot.sendMessage(chatId, `–ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è.\n–û—Å–Ω–æ–≤–Ω–∏–π –±–∞–ª–∞–Ω—Å : ${totalBalance.toFixed(1)}$ \n\n ${textMess}`, option)
}

async function blockNews(chatId, put){
    let list = await anyParseAPI(endUrlLink.news)
    let tmp =''
    // console.log(list.Data[0].id)

    for (let i = 0;i <10; i++){
        // tmp += `üéØ [${list.Data[i].title}](${list.Data[i].url})`
        tmp += `üéØ  <a href="${list.Data[i].url}">${list.Data[i].title.bold()}</a> \n\n`
    }
    bot.sendMessage(chatId, tmp, {parse_mode:'HTML'})
    if (put == true){
        blockTimeMessageNews(chatId)
    }
}

async function blockTimeMessageNews(chatId){

    let data = await Times.findAll({where:{user_id: chatId}})
    let tf = false

    if (Object.keys(data).length == 0 || data == null){
        bot.sendMessage(chatId, `–í–∏ —â–µ –Ω–µ –æ–±–∏—Ä–∞–ª–∏ —á–∞—Å –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö –Ω–æ–≤–∏–Ω . –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É "–î–æ–¥–∞—Ç–∏ —á–∞—Å" –¥–ª—è —Ç–æ–≥–æ , —â–æ–± –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –Ω–æ–≤–∏–Ω–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ .`, {
            reply_markup:{
                keyboard:[
                    [`–î–æ–¥–∞—Ç–∏ —á–∞—Å`],
                    [KB.back]
                ]
            }
        })
    }else {
        bot.sendMessage(chatId, `–ê–∫—Ç—É–∞–ª—å–Ω—ñ –Ω–æ–≤–∏–Ω–∏ `, {
            reply_markup:{
                keyboard:[
                    [`–î–æ–¥–∞—Ç–∏ —á–∞—Å`,`–í–∏–¥–∞–ª–∏—Ç–∏ —á–∞—Å`],
                    [KB.back]
                ]
            }
        })
    }

    let text = await onText()

    for (let a = 0; a<Object.keys(data).length; a++){
        if (data[a].dataValues.date_news == text){
            tf = true
        }
    }

    if (tf == true){
        bot.sendMessage(chatId, `–ü–æ—Ä—É—à–µ–Ω—ñ –Ω–æ—Ä–º–∏ –≤–≤–æ–¥—É —Ç–µ–∫—Å—Ç—É , —Ç–∞–∫–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É –≤–∂–µ —ñ—Å–Ω—É—î .`)
        blockTimeMessageNews(chatId)
    }
    if (text == '–î–æ–¥–∞—Ç–∏ —á–∞—Å'){

        bot.sendMessage(chatId, `–í–≤–µ–¥—ñ—Ç—å —á–∞—Å –≤ —è–∫–∏–π —Ö–æ—á–∏—Ç–µ –æ—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –∫–æ–∂–µ–Ω –¥–µ–Ω—å –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö –Ω–æ–≤–∏–Ω . –ù–∞–ø—Ä–∏–∫–ª–∞–¥ : ( 9:25 –∞–±–æ 8:00)`)

        text = await onText()

        let arrCP = text.split(':')
        if (text == KB.back){

        }else if (arrCP == null || arrCP.length <= 1 || text.indexOf(':')==-1 || arrCP.length >= 3 || Number(arrCP[0])==null || Number(arrCP[1])==null || arrCP[0]>24 || arrCP[0] <0 || arrCP[1] >60 || arrCP[1]<0){
            bot.sendMessage(chatId, `–ü–æ—Ä—É—à–µ–Ω—ñ –Ω–æ—Ä–º–∏ –≤–≤–æ–¥—É —Ç–µ–∫—Å—Ç—É , –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–≤–µ—Å—Ç–∏ —É –≤–∏–≥–ª—è–¥—ñ –ì–û–î–ò–ù–ò/–•–í–ò–õ–ò–ù–ò (–ù–∞–ø—Ä–∏–∫–ª–∞–¥ :  9:25 –∞–±–æ 8:00).`)
            blockTimeMessageNews(chatId)
        }else {
            bot.sendMessage(chatId, `–í—ñ—Ç–∞—î–º–æ , —á–∞—Å —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ .`)

            Times.create({
                user_id: chatId,
                date_news: text
            }).then(result => {
                console.log(result)
            }).catch(err =>{
                console.log(err)
            })
        }


    }else if (text == '–í–∏–¥–∞–ª–∏—Ç–∏ —á–∞—Å'){

        let tmp =''
        let arrTmp = [0]
        let checkNullAll = 0

        data = await Times.findAll({where:{user_id : chatId}})
        console.log(data)

        for (let b = 0; b<Object.keys(data).length; b++){
            if (data[b].dataValues.date_news == null){
                checkNullAll++
            }
        }

    // console.log(checkNullAll)

        if (text == KB.back){

        }else if (Object.keys(data).length == 0 || data == null || Object.keys(data).length == checkNullAll){
            bot.sendMessage(chatId, `–£ –≤–∞—Å —â–µ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–∞ —Ü—è —Ñ—É–∫—Ü—ñ—è  .`)
            blockTimeMessageNews(chatId)
        }else if(Object.keys(data).length >= 1 ){
            let listIndex =0

            for (let i=0; Object.keys(data).length>i;i++){
                if (data[i].dataValues.date_news != null){
                    tmp = tmp + `${listIndex+1})  ${data[i].dataValues.date_news} ;\n`
                    arrTmp.push(data[i].dataValues.id)
                    listIndex++
                }
            }
            console.log(arrTmp)
            bot.sendMessage(chatId, `–í–∞—à—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —á–∞—Å—É :\n${tmp}–î–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø–µ–≤–Ω–æ–≥–æ —á–∞—Å—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç–∏ —ñ–Ω–¥–µ–∫—Å –≤ —á–∞—Ç (–ù–∞–ø—Ä–∏–∫–ª–∞–¥ : "1")`)
            text = await onText()

            if (text == KB.back){

            }else if (Number(text)>=1 && Number(text)<arrTmp.length){
                await Times.destroy({ where : {id: arrTmp[Number(text)]}})
                await bot.sendMessage(chatId, `–£—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ .`)
                start(chatId)
            }else {
                await bot.sendMessage(chatId, `–ü–æ—Ä—É—à–µ–Ω—ñ –ø—Ä–∞–≤–∏–ª–∞ –≤–≤–æ–¥—É !`)
                start(chatId)
            }
        }

    }else if (text == KB.back){

    }

}

async function blockSignal(chatId) {

    let list
    let tmp =`‚ö†–£–í–ê–ì–ê‚ö† –î–∞–Ω–∏–π –±–æ—Ç –Ω–µ –¥–∞—î –Ω—ñ—è–∫–∏—Ö –≥–∞—Ä–∞–Ω—Ç—ñ–π , –±–æ—Ç –∞–Ω–∞–ª—ñ–∑—É—î –æ—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏ —Ç–∞ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ –¥–∞–Ω–Ω—ñ , ‚õî–ë–£–î–¨–¢–ï –û–ë–ï–†–ï–ñ–ù–Ü‚õî. \n\n `

    for (let i = 0; topCrypto.length>i; i++){
        list = await anyParseAPI(endUrlLink.signal+topCrypto[i])
        console.log(topCrypto[i]+' '+list.Data.inOutVar.sentiment)

        if (list.Data.inOutVar.sentiment == 'bearish'){

            tmp += `üêªüêªüêª ${topCrypto[i]} - –≤ –¥–∞–Ω–æ–º—É –≤–∏–ø–∞–¥–∫—É —Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –º–µ–¥–≤–µ–∂–∏–π —Ç—Ä–µ–Ω–¥ , —Ç–æ–±—Ç–æ –∫—É—Ä—Å –∑–º–µ–Ω—à—É—î—Ç—å—Å—è . –ú–æ–∂–ª–∏–≤–æ –±—É–ª–æ –± –Ω–µ–ø–æ–≥–∞–Ω–æ –≤—ñ–¥–∫—Ä–∏—Ç–∏ —à–æ—Ä—Ç –ø–æ–∑–∏—Ü—ñ—é \n\n`

        }else if(list.Data.inOutVar.sentiment == 'neutral'){

            tmp += `üê¢üê¢üê¢ ${topCrypto[i]} - –≤ –¥–∞–Ω–æ–º—É –≤–∏–ø–∞–¥–∫—É —Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏–π —Ç—Ä–µ–Ω–¥ , —Ç–æ–±—Ç–æ –∫—É—Ä—Å –Ω–µ—Å—Ç–∞–±—ñ–ª—å–Ω–∏–π . –ú–æ–∂–ª–∏–≤–æ –±—É–ª–æ –± –Ω–µ–ø–æ–≥–∞–Ω–æ –Ω–µ –≤—ñ–¥–∫—Ä–∏–≤–∞—Ç–∏ –ø–æ–∑–∏—Ü—ñ—ó \n\n`

        }else if (list.Data.inOutVar.sentiment == 'bullish'){

            tmp += `üêÆüêÆüêÆ ${topCrypto[i]} - –≤ –¥–∞–Ω–æ–º—É –≤–∏–ø–∞–¥–∫—É —Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è –±–∏—á–∏–π —Ç—Ä–µ–Ω–¥ , —Ç–æ–±—Ç–æ –∫—É—Ä—Å –∑–±—ñ–ª—å—à—É—î—Ç—å—Å—è . –ú–æ–∂–ª–∏–≤–æ –±—É–ª–æ –± –Ω–µ–ø–æ–≥–∞–Ω–æ –≤—ñ–¥–∫—Ä–∏—Ç–∏ –ª–æ–Ω–≥ –ø–æ–∑–∏—Ü—ñ—é \n\n`

        }

    }
    bot.sendMessage(chatId, tmp, {parse_mode:'HTML'})
    // console.log(list.Data[0].id)


}

setInterval(async function (){
    let date = new Date()
    let data = await Times.findAll()
    let target = await Targetmesses.findAll()
    let users = await Users.findAll()
    let tmp

    if (data.length>=1){
        for (let i=0;data.length>i;i++){

            if (data[i].dataValues.date_infoPortfolio == null && data[i].dataValues.date_news != null){
                tmp = data[i].dataValues.date_news.split(':')
                if (date.getHours() == tmp[0] && date.getMinutes() == Number(tmp[1])-1){
                   await blockNews(data[i].dataValues.user_id,false)
                }
            }else if (data[i].dataValues.date_infoPortfolio != null && data[i].dataValues.date_news == null){
                tmp = data[i].dataValues.date_infoPortfolio.split(':')
                if (date.getHours() == tmp[0] && date.getMinutes() == Number(tmp[1])-1){
                    await outputActive(data[i].dataValues.user_id,data[i].dataValues.id_wallet)
                }
            }
        }
    }

    if (target.length >= 1){
        for (let i=0;target.length>i;i++){
            tmp = target[i].dataValues.time.split(':')
            if (date.getHours() == tmp[0] && date.getMinutes() == Number(tmp[1])-1){
                for (let j=0;users.length>j;j++){
                    bot.sendMessage(users[j].dataValues.user_id, `${target[i].dataValues.mess}`)
                }
            }
        }
    }


},60000)

